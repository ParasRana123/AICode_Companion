from flask import Flask, request, jsonify
from groq import Groq
from flask_cors import CORS

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})  # Allow all origins for now; restrict if needed

groq_api_key = "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"
client = Groq(api_key=groq_api_key)

@app.route('/generate_response', methods=['POST'])
def generate_response():
    try:
        # Get data from the POST request
        data = request.json
        print("Received data:", data)  # Log the received data for debugging
        
        page_content = data.get("page_content", "").strip()
        user_query = data.get("user_query", "").strip()
        
        if not user_query:
            return jsonify({"error": "User query is required"}), 400

        # System instructions or contextual setup
        SystemChatBot = [
            {"role": "system", "content": "You are a helpful AI assistant specialized in coding problems."}
        ]

        # Additional context
        def Information():
            return f"The page contains the following content: {page_content}"

        # User's query and messages
        messages = [{"role": "user", "content": user_query}]

        # Call the Groq API
        try:
            completion = client.chat.completions.create(
                model="llama3-70b-8192",  # Replace with the correct model name
                messages=SystemChatBot + [{"role": "system", "content": Information()}] + messages,
                max_tokens=1024,
                temperature=0.7,
                top_p=1,
                stream=False,  # Set to False for non-streaming responses
            )
            
            # Accessing the response correctly
            ai_response = None
            if hasattr(completion, 'choices') and len(completion.choices) > 0:
                choice = completion.choices[0]  # Get the first choice
                if hasattr(choice, 'message'):
                    ai_response = choice.message.content if hasattr(choice.message, 'content') else "No response generated."

            if ai_response:
                return jsonify({"response": ai_response})
            else:
                return jsonify({"error": "No valid response generated by Groq API"}), 500

        except Exception as api_error:
            print("Groq API Error:", api_error)
            return jsonify({"error": f"Groq API Error: {str(api_error)}"}), 500

    except Exception as e:
        print("Server Error:", e)  # Log the error to the console
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(port=5000, debug=True)